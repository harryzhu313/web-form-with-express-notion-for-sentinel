// This file is run by the browser each time your view template is loaded

/**
 * Define variables that reference elements included in /views/index.html:
 */

// Forms
// const dbForm = document.getElementById("databaseForm") //‰ªéÊñáÊ°£‰∏≠Êü•ÊâæÂπ∂Ëé∑Âèñ ID ‰∏∫ "databaseForm" ÁöÑÂÖÉÁ¥†ÔºåÂπ∂Â∞ÜÂÖ∂ËµãÂÄºÁªôÂèòÈáè dbForm
const pageForm = document.getElementById("pageForm")
// const blocksForm = document.getElementById("blocksForm")
// const commentForm = document.getElementById("commentForm")


// Table cells where API responses will be appended
// const dbResponseEl = document.getElementById("dbResponse")
// const pageResponseEl = document.getElementById("pageResponse")
// const blocksResponseEl = document.getElementById("blocksResponse")
// const commentResponseEl = document.getElementById("commentResponse")

/**
 * Functions to handle appending new content to /views/index.html
 */

// Appends the API response to the UIÔºåÂ∞Ü API ÂìçÂ∫îÊ∑ªÂä†Âà∞È°µÈù¢‰∏ä
const appendApiResponse = function (apiResponse, el) {
  console.log(apiResponse) //ÊâìÂç∞ÂìçÂ∫î‰Ωì

  // Add success message to UI
  const newParagraphSuccessMsg = document.createElement("p")
  newParagraphSuccessMsg.textContent = "Result: " + apiResponse.message
  el.appendChild(newParagraphSuccessMsg)
  // See browser console for more information
  if (apiResponse.message === "error") return //Â¶ÇÊûúÂìçÂ∫î‰Ωì‰∏≠ÁöÑ message Â±ûÊÄßÂÄº‰∏∫ "error"ÔºåÂàôËøîÂõû

  // Add ID of Notion item (db, page, comment) to UIÔºåÂ∞Ü ID Ê∑ªÂä†Âà∞È°µÈù¢‰∏ä
  // const newParagraphId = document.createElement("p")
  // newParagraphId.textContent = "ID: " + apiResponse.data.id
  // el.appendChild(newParagraphId) 

  // Add URL of Notion item (db, page) to UIÔºåÂ∞Ü URL Ê∑ªÂä†Âà∞È°µÈù¢‰∏ä
//   if (apiResponse.data.url) {
//     const newAnchorTag = document.createElement("a")
//     newAnchorTag.setAttribute("href", apiResponse.data.url)
//     newAnchorTag.innerText = apiResponse.data.url
//     el.appendChild(newAnchorTag)
//   }
} 

// Appends the blocks API response to the UIÔºåÂ∞ÜÂùó API ÂìçÂ∫îÊ∑ªÂä†Âà∞È°µÈù¢‰∏ä
const appendBlocksResponse = function (apiResponse, el) {
  console.log(apiResponse)

  // Add success message to UI
  const newParagraphSuccessMsg = document.createElement("p")
  newParagraphSuccessMsg.textContent = "Result: " + apiResponse.message
  el.appendChild(newParagraphSuccessMsg)

  // Add block ID to UI
  const newParagraphId = document.createElement("p")
  newParagraphId.textContent = "ID: " + apiResponse.data.results[0].id
  el.appendChild(newParagraphId)
}

/**
 * Attach submit event handlers to each form included in /views/index.html
 */

// Attach submit event to each form
// dbForm.onsubmit = async function (event) {
//   event.preventDefault() //ËøôË°å‰ª£Á†ÅÈòªÊ≠¢‰∫ÜÊµèËßàÂô®ÈªòËÆ§ÁöÑË°®ÂçïÊèê‰∫§Ë°å‰∏∫ÔºàÂç≥È°µÈù¢Âà∑Êñ∞Ôºâ„ÄÇËøôÊòØ‰ΩøÁî® AJAX ÊäÄÊúØÊó∂ÂøÖÈ°ªÁöÑÊ≠•È™§ÔºåËÉΩËÆ©Áî®Êà∑‰ΩìÈ™åÊõ¥ÊµÅÁïÖ„ÄÇ

//   const dbName = event.target.dbName.value //Ëé∑ÂèñË°®Âçï‰∏≠Âêç‰∏∫ dbName ÁöÑËæìÂÖ•Ê°ÜÁöÑÂÄº
//   const body = JSON.stringify({ dbName }) //Â∞Ü dbName ÁöÑÂÄºËΩ¨Êç¢‰∏∫ JSON Â≠óÁ¨¶‰∏≤
// //ÂèëËµ∑ÂºÇÊ≠• POST ËØ∑Ê±Ç
//   const newDBResponse = await fetch("/databases", {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//     },
//     body,
//   })
//   const newDBData = await newDBResponse.json() //Ëß£ÊûêÂìçÂ∫î‰Ωì‰∏∫ JSON Ê†ºÂºè

//   appendApiResponse(newDBData, dbResponseEl) //Â∞ÜÂìçÂ∫î‰ΩìÊ∑ªÂä†Âà∞È°µÈù¢‰∏ä
// }

//ÂΩìÊ≤°ÊúâÊèê‰∫§ email Âíå name Êó∂Ôºå‰ºöÂºπÂá∫ÊèêÁ§∫Ê°ÜÔºå‰∏îËæìÂÖ•Ê°Ü‰ºöÂèòÁ∫¢;Êèê‰∫§ÊàêÂäüÂêéÔºåÊåâÈíÆ‰ºöÂèòÊàêÁªøËâ≤Âä®ÁîªÂØπÈí©

$(document).ready(function() {
  const pageForm = $("#pageForm");

  pageForm.on("submit", function(e) {
    e.preventDefault(); // ÈòªÊ≠¢Ë°®ÂçïÈªòËÆ§Êèê‰∫§

    const pageNameInput = $("#newPageName");
    const emailInput = $("#newEmail");
    const pageName = pageNameInput.val().trim();
    const email = emailInput.val().trim();

    // ÈáçÁΩÆÈîôËØØÊ†∑Âºè
    pageNameInput.css("border-bottom", "");
    emailInput.css("border-bottom", "");

    // È™åËØÅÂøÖÂ°´Â≠óÊÆµ
    if (!pageName || !email) {
      if (!pageName) pageNameInput.css("border-bottom", "2px solid red");
      if (!email) emailInput.css("border-bottom", "2px solid red");

      setTimeout(() => {
        alert("ü§Ø Name&Email must be required!");
      }, 0);

      return; // ‰∏çÁªßÁª≠ÊâßË°å
    }

    // ÂºÄÂßãÊåâÈíÆÂä®Áîª
    const button = pageForm.find("button");
    const lBar = button.find(".load");

    button.removeClass("complete");
    lBar.removeClass("loading").width(0);

    setTimeout(() => lBar.addClass("loading"), 10);

    // ÂèëÈÄÅË°®ÂçïÊï∞ÊçÆ
    const body = JSON.stringify({
      pageName,
      email
      // ÂÖ∂‰ªñÂ≠óÊÆµÊ†πÊçÆÈúÄË¶ÅÂä†ÂÖ•
    });

    fetch("/pages", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body,
    })
    .then(res => res.json())
    .then(data => {
      // 10msÁßíÂêéÊòæÁ§∫ÊàêÂäü
      setTimeout(() => {
        button.addClass("complete");
      }, 10);
      
      // ÊòæÁ§∫ËøîÂõûÁöÑÊ∂àÊÅØ
      // appendApiResponse(data, $("#pageResponse")[0]);
    })
    // .catch(() => alert("Êèê‰∫§Â§±Ë¥•ÔºåËØ∑ÈáçËØï"));
  });
});

// blocksForm.onsubmit = async function (event) {
//   event.preventDefault()

//   const pageID = event.target.pageID.value
//   const content = event.target.content.value
//   const body = JSON.stringify({ pageID, content })

//   const newBlockResponse = await fetch("/blocks", {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//     },
//     body,
//   })

//   const newBlockData = await newBlockResponse.json()
//   appendBlocksResponse(newBlockData, blocksResponseEl)
// }

// commentForm.onsubmit = async function (event) {
//   event.preventDefault()

//   const pageID = event.target.pageIDComment.value
//   const comment = event.target.comment.value
//   const body = JSON.stringify({ pageID, comment })

//   const newCommentResponse = await fetch("/comments", {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//     },
//     body,
//   })

//   const newCommentData = await newCommentResponse.json()
//   appendApiResponse(newCommentData, commentResponseEl)
// }
